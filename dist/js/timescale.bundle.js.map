{"version":3,"sources":["webpack:///./src/timescale.js"],"names":["__webpack_require__","r","__webpack_exports__","d3_selection__WEBPACK_IMPORTED_MODULE_0__","d3_scale__WEBPACK_IMPORTED_MODULE_1__","d3_transition__WEBPACK_IMPORTED_MODULE_2__","d3_hierarchy__WEBPACK_IMPORTED_MODULE_3__","d3_fetch__WEBPACK_IMPORTED_MODULE_4__","d3_ease__WEBPACK_IMPORTED_MODULE_5__","timescale","searchTree","node","property","match","data","children","result","i","length","prototype","moveToFront","this","each","parentNode","appendChild","width","window","innerWidth","height","oid","nam","interval_hash","0","currentInterval","root","[object Object]","div","Object","attr","time","append","scale","partitionFunc","size","padding","then","records","forEach","pid","abr","charAt","mid","parseInt","eag","lag","total","push","sum","d","selectAll","descendants","enter","x0","y0","x1","y1","col","style","on","goTo","hash","lvl","text","now","textGroup","getComputedTextLength","labelX","labelAbbrX","remove","resize","rectWidth","parseFloat","rectX","labelWidth","err","parent","depth","x","range","domain","t","duration","ease","transition","select","abbrevWidth","loc","eval","filter","cxi","id","e","replace","setTimeout"],"mappings":"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","file":"js/timescale.bundle.js","sourcesContent":["/* eslint-disable func-names */\n// 1. Fix drag\n// 2. Fix ticks\n\nimport { selection, select, selectAll, event } from 'd3-selection';\n// import { drag } from \"d3-drag\"\nimport { scaleLinear } from 'd3-scale';\nimport { transition } from 'd3-transition';\nimport { partition, hierarchy } from 'd3-hierarchy';\nimport { json } from 'd3-fetch';\nimport { easeLinear } from 'd3-ease';\n\n// eslint-disable-next-line func-names\nconst timescale = (function () {\n  // Via http://stackoverflow.com/questions/14167863/how-can-i-bring-a-circle-to-the-front-with-d3\n  // Necessary for highlighting time intervals properly\n  selection.prototype.moveToFront = function () {\n    return this.each(function () {\n      this.parentNode.appendChild(this);\n    });\n  };\n\n  // Via https://stackoverflow.com/questions/9133500/how-to-find-a-node-in-a-tree-with-javascript\n  function searchTree (node, property, match) {\n    if (property === 'nam' || 'oid' || 'mid' || 'lag' || '') {\n      if (node.data[property] === match) {\n        return node;\n      } if (node.children != null) {\n        let result = null;\n        for (let i = 0; result == null && i < node.children.length; i += 1) {\n          result = searchTree(node.children[i], property, match);\n        }\n        return result;\n      }\n      return null;\n    }\n  }\n\n  let width = window.innerWidth - 4;\n  const height = 130;\n\n  // Initialize data\n  const data = { oid: 0, nam: 'Geologic Time', children: [] };\n  const interval_hash = { 0: data };\n  let currentInterval;\n  let root;\n\n  return {\n\n    init(div) {\n      // Via https://stackoverflow.com/questions/38224875/replacing-d3-transform-in-d3-v4\n      /*\n      function getTransformation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function returns.\n        var g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, 'transform', transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get its SVGMatrix\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // Below calculations are taken and adapted from the private function transform/decompose.js of D3's module d3-interpolate.\n        var {a, b, c, d, e, f} = matrix;\n        var scaleX, scaleY, skewX;\n        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n        return {\n          translateX: e,\n          translateY: f,\n          rotate: Math.atan2(b, a) * 180 / Math.PI,\n          skewX: Math.atan(skewX) * 180 / Math.PI,\n          scaleX: scaleX,\n          scaleY: scaleY\n        };\n      }\n\n      let newX = 0.01;\n      let transformStart;\n      let dragStart;\n\n\n      // const dragFunc = drag()\n      //   .subject(function() {\n      //     // const t = select(\".timescale g\");\n      //     return {x: newX, y: 0};\n      //   })\n      //   .on(\"start\", function() {\n      //     dragStart = event.pageX;\n      //     // console.log(\"timescale > g\", select(\".timescale\").select(\"g\"))\n      //     // console.log(\"attr transform\", select(\".timescale\").select(\"g\").attr(\"transform\")) // Only show a scale transform no translate\n      //     transformStart = getTransformation(select(\".timescale\").select(\"g\").attr(\"transform\"));\n      //     // console.log({transformStart})\n      //     event.sourceEvent.stopPropagation();\n      //   })\n      //   .on(\"drag\", function() {\n      //   \tconst currentDrag = event.pageX;\n\n      //    \tnewX = (dragStart - currentDrag);\n\n      //     select(\".timescale\").select(\"g\")\n      //       .attr(\"transform\", function() {\n      //         return `translate(${[ parseInt(transformStart[0] + -newX), 0 ]}) scale(${parseInt(select(\".timescale\").style(\"width\"))/width})`;\n      //       });\n      //   });\n      */\n\n      // Add class timescale to whatever div was supplied\n      select(`#${div}`).attr('class', 'timescale');\n\n      // !!!Move into draw!\n      // Create the SVG for the chart\n      const time = select(`#${div}`).append('svg')\n        .attr('width', width)\n        .attr('height', height + 20)\n        .append('g');\n\n      // Move whole tick SVG group down 125px\n      const scale = time.append('g')\n        .attr('id', 'tickBar')\n        .attr('transform', `translate(0,${height - 5})`);\n\n      // Create a new d3 partition layout\n      const partitionFunc = partition()\n        .size([width, height])\n        .padding(0);\n\n      // Load the time scale data\n      json('jsons/intervals.json').then((result) => {\n        // Construct hierarchy variable 'data' by oid's from paleoJSON\n        result.records.forEach((i) => {\n          i.children = [];\n          i.pid = i.pid || 0; // Check if i is not a highest level period\n          i.abr = i.abr || i.nam.charAt(0);\n          i.mid = parseInt((i.eag + i.lag) / 2); // length of period\n          i.total = i.eag - i.lag;\n          interval_hash[i.oid] = i;\n          interval_hash[i.pid].children.push(i);\n        });\n\n        root = hierarchy(data)\n          .sum(d => ((d.children.length === 0) ? d.total + 0.117 : 0)); // ? add time for Holocene\n\n        partitionFunc(root);\n\n        const rectGroup = time.append('g')\n          .attr('id', 'rectGroup');\n\n        // Create the rectangles\n        rectGroup.selectAll('rect')\n          .data(root.descendants())\n          .enter().append('rect')\n          .attr('x', d => d.x0)\n          .attr('y', d => d.y0)\n          .attr('width', d => d.x1 - d.x0)\n          .attr('height', d => d.y1 - d.y0)\n          .attr('fill', d => d.data.col || '#000')\n          .attr('id', d => `t${d.data.oid}`)\n          .style('opacity', 0.83)\n        // .call(dragFunc)\n          .on('click', (d) => { timescale.goTo(d); });\n\n        // Scale bar for the bottom of the graph\n        const scaleBar = scale.selectAll('rect')\n          .data(root.descendants());\n\n        const hash = scaleBar.enter().append('g')\n          .attr('class', d => `tickGroup s${d.data.lvl}`)\n          .attr('transform', d => `translate(${d.x0}, 0)`);\n\n        hash.append('line')\n          .attr('x1', 0)\n          .attr('y1', 6)\n          .attr('x2', 0)\n          .attr('y2', 12)\n          .style('stroke-width', '0.05em');\n\n        hash.append('text')\n          .attr('x', 0)\n          .attr('y', 20)\n          .style('text-anchor', d => ((d.data.eag !== 0.0117) ? 'middle' : 'end'))\n          .style('font-size', '0.65em')\n          .style('fill', '#000')\n          .text(d => d.data.eag);\n\n        // Create a tick for year 0\n        const now = scale.append('g')\n          .data([{ x0: width, y0: 0 }])\n          .attr('class', 'tickGroup s1 s2 s3 s4 s5')\n          .attr('transform', `translate(${width}, 0)`);\n\n        now.append('line')\n          .attr('x1', 0)\n          .attr('y1', 6)\n          .attr('x2', 0)\n          .attr('y2', 12)\n          .style('stroke-width', '0.05em');\n\n        now.append('text')\n          .attr('x', 0)\n          .attr('y', 20)\n          .attr('id', 'now')\n          .style('fill', 'white')\n          .style('text-anchor', 'end')\n          .style('font-size', '0.65em')\n          .style('fill', '#777')\n          .text('0');\n\n        const textGroup = time.append('g')\n          .attr('id', 'textGroup');\n\n        // Add the full labels\n        textGroup.selectAll('fullName')\n          .data(root.descendants())\n          .enter().append('text')\n          .text(d => d.data.nam)\n          .attr('x', 1)\n          .attr('y', d => d.y0 + 15)\n          .attr('width', function () { return this.getComputedTextLength(); })\n          .attr('height', d => d.y1 - d.y0)\n          .attr('class', d => `fullName level${d.data.lvl}`)\n          .attr('id', d => `l${d.data.oid}`)\n          .attr('x', d => timescale.labelX(d))\n          .on('click', (d) => { timescale.goTo(d); });\n\n        // Add the abbreviations\n        textGroup.selectAll('abbrevs')\n          .data(root.descendants())\n          .enter().append('text')\n          .attr('x', 1)\n          .attr('y', d => d.y0 + 15)\n          .attr('width', 30)\n          .attr('height', d => d.y1 - d.y0)\n          .text(d => d.data.abr) // charAt(0)\n          .attr('class', d => `abbr level${d.data.lvl}`)\n          .attr('id', d => `a${d.data.oid}`)\n          .attr('x', d => timescale.labelAbbrX(d))\n          .on('click', (d) => { timescale.goTo(d); });\n\n        // Position the labels for the first time\n        timescale.goTo(root);\n\n        // Remove the Geologic time abbreviation\n        select('.abbr.levelundefined').remove();\n\n        // Open to Phanerozoic\n        timescale.goTo('Phanerozoïcum');\n        timescale.currentInterval = searchTree(root, 'nam', 'Phanerozoïcum');\n      }); // End PaleoDB json callback\n      // attach window resize listener to the window\n      select(window).on('resize', timescale.resize);\n    },\n\n    // Calculates x-position for label abbreviations\n    labelAbbrX(d) {\n      const rectWidth = parseFloat(select(`#t${d.data.oid}`).attr('width'));\n      const rectX = parseFloat(select(`#t${d.data.oid}`).attr('x'));\n      const labelWidth = select(`#a${d.data.oid}`).node().getComputedTextLength();\n\n      if (rectWidth - 8 < labelWidth) {\n        select(`#a${d.data.oid}`).style('display', 'none');\n      }\n\n      return rectX + (rectWidth - labelWidth) / 2;\n    },\n\n    labelX(d) {\n      const rectWidth = d.x1 - d.x0;\n      const rectX = d.x0;\n\n      let labelWidth;\n      try {\n        labelWidth = select(`#l${d.data.oid}`).node().getComputedTextLength();\n      } catch (err) {\n        labelWidth = 25;\n      }\n\n      // Hide full names if they are too small for their rectangles\n      if (rectWidth - 10 < labelWidth) {\n        select(`#l${d.data.oid}`).style('display', 'none');\n      } else {\n        select(`#a${d.data.oid}`).style('display', 'none');\n      }\n\n      return rectX + (rectWidth - labelWidth) / 2;\n    },\n\n    // Zooms the graph to a given time interval\n    // Accepts a data point or a named interval\n    goTo(d) {\n      if (typeof d === 'string') {\n        d = searchTree(root, 'nam', d);\n      } else if (d.children) {\n        if (d.children.length < 1) {\n          const d = d.data.parent;\n        }\n      }\n\n      // Stores the currently focused time interval for state restoration purposes\n      timescale.currentInterval = d;\n\n      selectAll('.fullName')\n        .style('display', 'block');\n\n      selectAll('.abbr')\n        .style('display', 'block');\n\n      // Adjust the bottom scale\n      const depth = (d.depth !== 'undefined') ? parseInt(d.depth) + 1 : 1;\n      selectAll('.scale').style('display', 'none');\n      selectAll('.tickGroup').style('display', 'none');\n      selectAll(`.s${depth}`).style('display', 'block');\n\n      const x = scaleLinear()\n        .range([5, width])\n        .domain([d.x0, d.x1]);\n\n      // Define transition for concurrent animation\n      const t = transition()\n        .duration(300)\n        .ease(easeLinear);\n\n      // Transition the rectangles\n      selectAll('rect').transition(t)\n        .attr('x', d => x(d.x0))\n        .attr('width', d => x(d.x1) - x(d.x0));\n\n      // Transition tick groups\n      selectAll('.tickGroup').transition(t)\n        .attr('transform', function (d) {\n          select(this).selectAll('text').style('text-anchor', 'middle');\n          if (x(d.x0) === 5) {\n            select(this).select('text')\n              .style('text-anchor', 'start');\n          } else if (d.x0 === width) {\n            select(this).select('text')\n              .style('text-anchor', 'end');\n          }\n          if (typeof x(d.x0) === 'number') { return `translate(${x(d.x0)}, 0)`; }\n        });\n\n      // Move the full names, to keep animation concurrent labelX has to be calculated inside to goTo function\n      selectAll('.fullName').transition(t)\n        .attr('x', (d) => {\n          const rectWidth = x(d.x1) - x(d.x0);\n          const rectX = x(d.x0);\n          let labelWidth;\n          try {\n            labelWidth = select(`#l${d.data.oid}`).node().getComputedTextLength(); // this?\n          } catch (err) {\n            labelWidth = 25;\n          }\n\n          if (rectWidth - 8 < labelWidth) {\n            select(`#l${d.data.oid}`).style('display', 'none');\n          } else {\n            select(`#a${d.data.oid}`).style('display', 'none');\n          }\n\n          return rectX + (rectWidth - labelWidth) / 2;\n        })\n        .attr('height', (d) => { return d.y1 - d.y0; });\n\n      // Move the abbreviations\n      selectAll('.abbr').transition(t)\n        .attr('x', (d) => {\n          const rectWidth = x(d.x1) - x(d.x0);\n          const rectX = x(d.x0);\n\n          const abbrevWidth = select(`#a${d.data.oid}`).node().getComputedTextLength();\n\n          if (rectWidth - 8 < abbrevWidth) {\n            select(`#a${d.data.oid}`).style('display', 'none');\n          }\n\n          return rectX + (rectWidth - abbrevWidth) / 2;\n        })\n        .attr('height', d => d.y1 - d.y0)\n        .on('end', () => {\n          selectAll('.fullName').style('fill', '#333');\n          selectAll('.abbr').style('fill', '#333');\n        });\n\n      // Center whichever interval was clicked\n      select(`#l${d.data.oid}`).transition(t)\n        .attr('x', width / 2);\n\n      // Position all the parent labels in the middle of the scale\n      if (d.parent !== null) {\n        const { depth } = d;\n        let loc = 'd.parent';\n        for (let i = 0; i < depth; i += 1) {\n          const parent = eval(loc).data.nam;\n          selectAll('.abbr').filter(d => d.data.nam === parent).transition(t)\n            .attr('x', width / 2);\n          selectAll('.fullName').filter(d => d.data.nam === parent).transition(t)\n            .attr('x', width / 2);\n          loc += '.parent';\n        }\n        selectAll('.abbr').filter(d => d.data.nam === parent).transition(t)\n          .attr('x', width / 2);\n        selectAll('.fullName').filter(d => d.data.nam === parent).transition(t)\n          .attr('x', width / 2);\n      }\n    },\n\n    // Highlight a given time interval\n    highlight(d) {\n      selectAll('rect').style('stroke', '#fff');\n      if (d.cxi) {\n        const id = d.cxi;\n        selectAll(`rect#t${d.cxi}`).style('stroke', '#000').moveToFront();\n        selectAll(`#l${d.cxi}`).moveToFront();\n      } else if (typeof d === 'string') {\n        let id = selectAll('rect').filter(e => e.nam === d).attr('id');\n        id = id.replace('t', '');\n      } else {\n        let id = select(d).attr('id');\n        id = id.replace('p', '');\n      }\n\n      selectAll(`rect#t${id}`).style('stroke', '#000').moveToFront();\n      selectAll(`#l${id}`).moveToFront();\n      selectAll('.abbr').moveToFront();\n    },\n\n    // Unhighlight a time interval by resetting the stroke of all rectangles\n    unhighlight() {\n      selectAll('rect').style('stroke', '#fff');\n    },\n\n    resize() {\n      width = window.innerWidth - 4;\n\n      select('.timescale svg')\n        .style('width', width);\n\n      setTimeout(() => {\n        timescale.goTo(timescale.currentInterval.data.nam);\n      }, 600);\n    },\n\n    /* Interval hash can be exposed publically so that the time scale data can be used\n       for other things, such as maps */\n    // https://github.com/d3/d3-hierarchy/issues/58\n    interval_hash,\n\n    // Method for getting the currently zoomed-to interval - useful for preserving states\n    currentInterval,\n  };\n}());\n\nexport default timescale;\n"],"sourceRoot":""}